# Docker Compose file for Erasmus Partner Agent

services:
  erasmus-partner-agent:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: erasmus-partner-agent
    ports:
      - "8000:8000"
    environment:
      # LLM Configuration (REQUIRED)
      - LLM_PROVIDER=openai
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=gpt-4
      - LLM_BASE_URL=https://api.openai.com/v1
      
      # SALTO-YOUTH Authentication (REQUIRED)
      - SALTO_USERNAME=${SALTO_USERNAME}
      - SALTO_PASSWORD=${SALTO_PASSWORD}
      
      # SALTO-YOUTH Configuration
      - OTLAS_BASE_URL=https://www.salto-youth.net/tools/otlas-partner-finding
      - USER_AGENT=ErasmusPartnerAgent/1.0
      - REQUEST_DELAY=1.0
      - MAX_RETRIES=3
      - TIMEOUT_SECONDS=30
      
      # Application Settings
      - APP_ENV=production
      - LOG_LEVEL=INFO
      - DEBUG=false
      - ENABLE_CACHING=true
      - CACHE_TTL=3600
      
      # MCP Server Configuration
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8000
      - MCP_SERVER_RELOAD=false
      - MCP_AUTH_ENABLED=false
      
      # Performance Settings
      - CONCURRENT_REQUESTS=3
      - SCRAPING_DELAY=1.0
      - CONNECTION_POOL_SIZE=10
    
    volumes:
      # Mount exports directory for file exports
      - ./exports:/app/exports
      # Mount logs directory for application logs
      - ./logs:/app/logs
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - erasmus-network

  # Optional: Add a reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: erasmus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro  # Mount SSL certificates if using HTTPS
    depends_on:
      - erasmus-partner-agent
    restart: unless-stopped
    networks:
      - erasmus-network
    profiles:
      - production  # Only start with --profile production

  # Optional: Redis for caching (advanced setup)
  redis:
    image: redis:7-alpine
    container_name: erasmus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - erasmus-network
    profiles:
      - caching  # Only start with --profile caching

  # Optional: Monitoring with Prometheus (advanced setup)
  prometheus:
    image: prom/prometheus:latest
    container_name: erasmus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - erasmus-network
    profiles:
      - monitoring  # Only start with --profile monitoring

volumes:
  redis_data:
  prometheus_data:

networks:
  erasmus-network:
    driver: bridge